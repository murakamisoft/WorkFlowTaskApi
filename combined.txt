以下が最新のソース一覧
----- C:\workspace\WorkflowTaskAPI\src\main\java\com\bmpworkflow\workflowtaskapi\WorkflowTaskApiApplication.java ----- 
package com.bmpworkflow.workflowtaskapi;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.web.client.RestTemplate;

@SpringBootApplication
@MapperScan("com.bmpworkflow.workflowtaskapi.mapper")
public class WorkflowTaskApiApplication {

  public static void main(String[] args) {
    SpringApplication.run(WorkflowTaskApiApplication.class, args);
  }

  @Bean
  public RestTemplate restTemplate() {
    return new RestTemplate();
  }
}
   
----- C:\workspace\WorkflowTaskAPI\src\main\java\com\bmpworkflow\workflowtaskapi\consumer\KafkaConsumer.java ----- 
package com.bmpworkflow.workflowtaskapi.consumer;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.bmpworkflow.workflowtaskapi.model.TaskMessage; // 新しいインポート
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;
import io.micrometer.common.util.StringUtils;

@Component
public class KafkaConsumer {

  @Autowired
  private RestTemplate restTemplate;

  @KafkaListener(topics = "task-events", groupId = "task-api-group")
  public void listen(String message) {
    System.out.println("Received message: " + message);

    if (StringUtils.isBlank(message)) {
      System.out.println("Received empty message, ignoring it.");
      return;
    }

    callTaskApiEndpoint(message);
  }

  private void callTaskApiEndpoint(String message) {
    ObjectMapper objectMapper = new ObjectMapper();
    try {
      // メッセージをTaskMessageオブジェクトに変換
      TaskMessage taskMessage = objectMapper.readValue(message, TaskMessage.class);
      String apiUrl = "http://localhost:8080" + taskMessage.getApiEndpoint();

      switch (taskMessage.getHttpMethod()) {
        case "POST":
          restTemplate.postForEntity(apiUrl, taskMessage.getParams(), String.class);
          break;
        case "DELETE":
          restTemplate.delete(apiUrl + "/" + taskMessage.getParams().getTaskId());
          break;
        // 他のHTTPメソッドに対する処理を追加することもできます
      }
    } catch (JsonProcessingException e) {
      e.printStackTrace(); // エラーログを出力
    }
  }
}
   
----- C:\workspace\WorkflowTaskAPI\src\main\java\com\bmpworkflow\workflowtaskapi\controller\TaskController.java ----- 
package com.bmpworkflow.workflowtaskapi.controller;

import com.bmpworkflow.workflowtaskapi.model.Task;
import com.bmpworkflow.workflowtaskapi.service.TaskService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
public class TaskController {

  @Autowired
  private TaskService taskService; // TaskServiceをインジェクション

  @GetMapping("/tasks")
  public List<Task> getTasks() {
    return taskService.getAllTasks(); // TaskServiceを使用してタスクを取得
  }

  @PostMapping("/tasks")
  public Task createTask(@RequestBody Task task) {
    return taskService.createTask(task);
  }

  @DeleteMapping("/tasks/{taskId}")
  public void deleteTask(@PathVariable Long taskId) {
    taskService.deleteTask(taskId); // TaskServiceを使用してタスクを削除
  }
}
   
----- C:\workspace\WorkflowTaskAPI\src\main\java\com\bmpworkflow\workflowtaskapi\mapper\TaskMapper.java ----- 
package com.bmpworkflow.workflowtaskapi.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Select;

import com.bmpworkflow.workflowtaskapi.model.Task;

@Mapper
public interface TaskMapper {

  @Select("SELECT * FROM m_task")
  List<Task> findAllTasks();

  @Insert("INSERT INTO m_task (task_id, title, description, completed) VALUES (#{taskId}, #{title}, #{description}, #{completed})")
  void insertTask(Task task);

  @Delete("DELETE FROM m_task WHERE task_id = #{taskId}")
  void deleteTask(Long taskId);
}
   
----- C:\workspace\WorkflowTaskAPI\src\main\java\com\bmpworkflow\workflowtaskapi\model\Task.java ----- 
package com.bmpworkflow.workflowtaskapi.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data // ゲッター、セッター、toString、equals、hashCodeを自動生成
@NoArgsConstructor // 引数なしコンストラクタを生成
@AllArgsConstructor // 引数ありコンストラクタを生成
public class Task {
  private Long taskId; // タスクのID
  private String title; // タスクのタイトル
  private String description; // タスクの説明
  private boolean completed; // タスクの完了状態
}
   
----- C:\workspace\WorkflowTaskAPI\src\main\java\com\bmpworkflow\workflowtaskapi\model\TaskMessage.java ----- 
package com.bmpworkflow.workflowtaskapi.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data // ゲッター、セッター、toString、equals、hashCodeを自動生成
@NoArgsConstructor // 引数なしコンストラクタを生成
@AllArgsConstructor // 引数ありコンストラクタを生成
public class TaskMessage {
  private String apiEndpoint;
  private String httpMethod;
  private TaskMessageParams params;
}
   
----- C:\workspace\WorkflowTaskAPI\src\main\java\com\bmpworkflow\workflowtaskapi\model\TaskMessageParams.java ----- 
package com.bmpworkflow.workflowtaskapi.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data // ゲッター、セッター、toString、equals、hashCodeを自動生成
@NoArgsConstructor // 引数なしコンストラクタを生成
@AllArgsConstructor // 引数ありコンストラクタを生成
public class TaskMessageParams {
  private Long taskId;
  private String title;
  private String description;
  private boolean completed;
}
   
----- C:\workspace\WorkflowTaskAPI\src\main\java\com\bmpworkflow\workflowtaskapi\service\TaskService.java ----- 
package com.bmpworkflow.workflowtaskapi.service;

import com.bmpworkflow.workflowtaskapi.mapper.TaskMapper;
import com.bmpworkflow.workflowtaskapi.model.Task;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service // サービスクラスであることを示す
public class TaskService {

  @Autowired
  private TaskMapper taskMapper; // タスクマッパーのインジェクション

  // すべてのタスクを取得するメソッド
  public List<Task> getAllTasks() {
    return taskMapper.findAllTasks();
  }

  public Task createTask(Task task) {
    taskMapper.insertTask(task); // 新たにタスクをDBに追加するメソッドを呼び出す
    return task; // 追加されたタスクを返す
  }

  // タスクを削除するメソッド
  public void deleteTask(Long taskId) {
    taskMapper.deleteTask(taskId); // マッパーを使用してDBからタスクを削除
  }

}
   
----- C:\workspace\WorkflowTaskAPI\src\test\java\com\bmpworkflow\workflowtaskapi\WorkflowTaskApiApplicationTests.java ----- 
package com.bmpworkflow.workflowtaskapi;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class WorkflowTaskApiApplicationTests {

	@Test
	void contextLoads() {
	}

}
   
----- C:\workspace\WorkflowTaskAPI\src\test\java\com\bmpworkflow\workflowtaskapi\controller\TaskControllerTest.java ----- 
package com.bmpworkflow.workflowtaskapi.controller;

import com.bmpworkflow.workflowtaskapi.model.Task;
import com.bmpworkflow.workflowtaskapi.service.TaskService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class TaskControllerTest {

  @InjectMocks
  private TaskController taskController;

  @Mock
  private TaskService taskService;

  private Task task;

  @BeforeEach
  void setUp() {
    MockitoAnnotations.openMocks(this);
    task = new Task(1L, "Test Task", "This is a test task", false);
  }

  @Test
  void getTasks() {
    List<Task> tasks = new ArrayList<>();
    tasks.add(task);

    when(taskService.getAllTasks()).thenReturn(tasks);

    List<Task> result = taskController.getTasks();

    assertEquals(1, result.size());
    assertEquals("Test Task", result.get(0).getTitle());
  }

  @Test
  void createTask() {
    when(taskService.createTask(task)).thenReturn(task);

    Task result = taskController.createTask(task);

    assertEquals("Test Task", result.getTitle());
    verify(taskService).createTask(task);
  }

  @Test
  void deleteTask() {
    doNothing().when(taskService).deleteTask(task.getTaskId());

    ResponseEntity<Void> response = new ResponseEntity<>(HttpStatus.NO_CONTENT);
    taskController.deleteTask(task.getTaskId());

    assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());
    verify(taskService).deleteTask(task.getTaskId());
  }
}
   
----- C:\workspace\WorkflowTaskAPI\src\test\java\com\bmpworkflow\workflowtaskapi\service\TaskServiceTest.java ----- 
package com.bmpworkflow.workflowtaskapi.service;

import com.bmpworkflow.workflowtaskapi.mapper.TaskMapper;
import com.bmpworkflow.workflowtaskapi.model.Task;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class TaskServiceTest {

  @InjectMocks
  private TaskService taskService;

  @Mock
  private TaskMapper taskMapper;

  private Task task;

  @BeforeEach
  void setUp() {
    MockitoAnnotations.openMocks(this);
    task = new Task(1L, "Test Task", "This is a test task", false);
  }

  @Test
  void getAllTasks() {
    List<Task> tasks = new ArrayList<>();
    tasks.add(task);

    when(taskMapper.findAllTasks()).thenReturn(tasks);

    List<Task> result = taskService.getAllTasks();

    assertEquals(1, result.size());
    assertEquals("Test Task", result.get(0).getTitle());
  }

  @Test
  void createTask() {
    taskService.createTask(task);

    ArgumentCaptor<Task> taskCaptor = ArgumentCaptor.forClass(Task.class);
    verify(taskMapper).insertTask(taskCaptor.capture());

    assertEquals(task.getTitle(), taskCaptor.getValue().getTitle());
  }

  @Test
  void deleteTask() {
    taskService.deleteTask(task.getTaskId());
    verify(taskMapper).deleteTask(task.getTaskId());
  }
}
   
