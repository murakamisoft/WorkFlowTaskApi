以下が最新のソース一覧
----- C:\workspace\WorkflowTaskAPI\src\main\java\com\murakamisoft\workflowtaskapi\WorkflowTaskApiApplication.java ----- 
package com.murakamisoft.workflowtaskapi;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.web.client.RestTemplate;

@SpringBootApplication
@MapperScan("com.murakamisoft.workflowtaskapi.mapper")
public class WorkflowTaskApiApplication {

  public static void main(String[] args) {
    SpringApplication.run(WorkflowTaskApiApplication.class, args);
  }

  @Bean
  public RestTemplate restTemplate() {
    return new RestTemplate();
  }
}
   
----- C:\workspace\WorkflowTaskAPI\src\main\java\com\murakamisoft\workflowtaskapi\consumer\KafkaConsumer.java ----- 
package com.murakamisoft.workflowtaskapi.consumer;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.murakamisoft.workflowtaskapi.model.Task;
import io.micrometer.common.util.StringUtils;

@Component
public class KafkaConsumer {

  @Autowired
  private RestTemplate restTemplate; // RestTemplateをインジェクション

  @KafkaListener(topics = "task-events", groupId = "task-api-group")
  public void listen(String message) {
    System.out.println("Received message: " + message);

    // StringUtilsを使ってメッセージが空またはnullかどうかをチェック
    if (StringUtils.isBlank(message)) {
      System.out.println("Received empty message, ignoring it.");
      return; // 早期リターン
    }

    callTaskApiEndpoint(message); // 受信したメッセージに基づいてエンドポイントを呼び出す
  }

  private void callTaskApiEndpoint(String message) {
    String apiUrl = "http://localhost:8080/tasks";
    // JSONをTaskオブジェクトに変換
    ObjectMapper objectMapper = new ObjectMapper();
    try {
      Task task = objectMapper.readValue(message, Task.class);
      restTemplate.postForEntity(apiUrl, task, String.class);
    } catch (JsonProcessingException e) {
      e.printStackTrace(); // エラーログを出力
    }

  }
}
   
----- C:\workspace\WorkflowTaskAPI\src\main\java\com\murakamisoft\workflowtaskapi\controller\TaskController.java ----- 
package com.murakamisoft.workflowtaskapi.controller;

import com.murakamisoft.workflowtaskapi.model.Task;
import com.murakamisoft.workflowtaskapi.service.TaskService; // TaskServiceをインポート
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
public class TaskController {

  @Autowired
  private TaskService taskService; // TaskServiceをインジェクション

  @GetMapping("/tasks")
  public List<Task> getTasks() {
    return taskService.getAllTasks(); // TaskServiceを使用してタスクを取得
  }

  @PostMapping("/tasks")
  public Task createTask(@RequestBody Task task) {
    return taskService.createTask(task);
  }

  @DeleteMapping("/tasks/{taskId}")
  public void deleteTask(@PathVariable Long taskId) {
    taskService.deleteTask(taskId); // TaskServiceを使用してタスクを削除
  }
}
   
----- C:\workspace\WorkflowTaskAPI\src\main\java\com\murakamisoft\workflowtaskapi\mapper\TaskMapper.java ----- 
package com.murakamisoft.workflowtaskapi.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Select;

import com.murakamisoft.workflowtaskapi.model.Task;

@Mapper
public interface TaskMapper {

  @Select("SELECT * FROM m_task")
  List<Task> findAllTasks();

  @Insert("INSERT INTO m_task (task_id, title, description, completed) VALUES (#{taskId}, #{title}, #{description}, #{completed})")
  void insertTask(Task task);

  @Delete("DELETE FROM m_task WHERE task_id = #{taskId}")
  void deleteTask(Long taskId);
}
   
----- C:\workspace\WorkflowTaskAPI\src\main\java\com\murakamisoft\workflowtaskapi\model\Task.java ----- 
package com.murakamisoft.workflowtaskapi.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data // ゲッター、セッター、toString、equals、hashCodeを自動生成
@NoArgsConstructor // 引数なしコンストラクタを生成
@AllArgsConstructor // 引数ありコンストラクタを生成
public class Task {
  private Long taskId; // タスクのID
  private String title; // タスクのタイトル
  private String description; // タスクの説明
  private boolean completed; // タスクの完了状態
}
   
----- C:\workspace\WorkflowTaskAPI\src\main\java\com\murakamisoft\workflowtaskapi\service\TaskService.java ----- 
package com.murakamisoft.workflowtaskapi.service;

import com.murakamisoft.workflowtaskapi.mapper.TaskMapper;
import com.murakamisoft.workflowtaskapi.model.Task;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service // サービスクラスであることを示す
public class TaskService {

  @Autowired
  private TaskMapper taskMapper; // タスクマッパーのインジェクション

  // すべてのタスクを取得するメソッド
  public List<Task> getAllTasks() {
    return taskMapper.findAllTasks();
  }

  public Task createTask(Task task) {
    taskMapper.insertTask(task); // 新たにタスクをDBに追加するメソッドを呼び出す
    return task; // 追加されたタスクを返す
  }

  // タスクを削除するメソッド
  public void deleteTask(Long taskId) {
    taskMapper.deleteTask(taskId); // マッパーを使用してDBからタスクを削除
  }

}
   
----- C:\workspace\WorkflowTaskAPI\src\test\java\com\murakamisoft\workflowtaskapi\WorkflowTaskApiApplicationTests.java ----- 
package com.murakamisoft.workflowtaskapi;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class WorkflowTaskApiApplicationTests {

	@Test
	void contextLoads() {
	}

}
   
----- C:\workspace\WorkflowTaskAPI\build\resources\main\mybatis-config.xml ----- 
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>
    <settings>
        <setting name="mapUnderscoreToCamelCase" value="true"/>
    </settings>
</configuration>
   
----- C:\workspace\WorkflowTaskAPI\src\main\resources\mybatis-config.xml ----- 
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>
    <settings>
        <setting name="mapUnderscoreToCamelCase" value="true"/>
    </settings>
</configuration>
   
----- C:\workspace\WorkflowTaskAPI\build\resources\main\application.yml ----- 
server:
  port: 8080

spring:
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: task-api-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

  datasource:
    url: jdbc:oracle:thin:@localhost:1521/XEPDB1
    username: oracle_user
    password: pass
    driver-class-name: oracle.jdbc.OracleDriver

mybatis:
  config-location: classpath:mybatis-config.xml
   
----- C:\workspace\WorkflowTaskAPI\src\main\resources\application.yml ----- 
server:
  port: 8080

spring:
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: task-api-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

  datasource:
    url: jdbc:oracle:thin:@localhost:1521/XEPDB1
    username: oracle_user
    password: pass
    driver-class-name: oracle.jdbc.OracleDriver

mybatis:
  config-location: classpath:mybatis-config.xml
   
----- C:\workspace\WorkflowTaskAPI\build.gradle ----- 
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.10'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.murakamisoft'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
    // Spring Boot Core
    implementation 'org.springframework.boot:spring-boot-starter'
    
    // Spring Web (Webアプリケーション用)
    implementation 'org.springframework.boot:spring-boot-starter-web'  // 追加

    // Spring Kafka (Kafka連携用)
    implementation 'org.springframework.kafka:spring-kafka'

    // MyBatis (DBアクセス用)
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'

    // Oracle JDBC Driver (Oracle DB接続用)
    implementation 'com.oracle.database.jdbc:ojdbc8:21.8.0.0'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation 'org.apache.commons:commons-lang3:3.17.0'

    // Spring Boot Test (テスト用)
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    
    // JUnit 5 (テスト用)
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    
    // Spring Kafka Test (Kafkaのテスト用)
    testImplementation 'org.springframework.kafka:spring-kafka-test'

    // MyBatis test
    testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.3'
    
    // Lombok (ボイラープレートコードを削減するためのライブラリ)
    compileOnly 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.projectlombok:lombok:1.18.28'
}

tasks.named('test') {
	useJUnitPlatform()
}
   
----- C:\workspace\WorkflowTaskAPI\settings.gradle ----- 
rootProject.name = 'WorkflowTaskAPI'
   
